plugins {
    id 'org.ajoberstar.grgit' version '4.0.2'
    id 'com.github.ben-manes.versions' version '0.27.0'
}

apply plugin: 'java-library'
apply plugin: 'maven-publish'
apply plugin: 'eclipse'

repositories {
    mavenCentral()
}

def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
}

dependencyUpdates {
    rejectVersionIf {
        isNonStable(it.candidate.version)
    }
}

test {
    useJUnitPlatform()
}

group = 'cpw.mods'

sourceCompatibility = 1.8
targetCompatibility = 1.8

version = grgit.describe(longDescr: true).split('-').with { "${it[0]}.${it[1]}" }

dependencies {
    implementation("org.apache.logging.log4j:log4j-api:2.11.2")
    implementation("org.apache.logging.log4j:log4j-core:2.11.2")
    testImplementation("org.powermock:powermock-core:2.0.+")
    testImplementation("org.junit.jupiter:junit-jupiter-api:5.6.+")
    testImplementation("org.junit.jupiter:junit-jupiter-engine:5.6.+")
}

task sourcesJar(type: Jar) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

tasks.withType(JavaCompile) {
    options.compilerArgs << '-Xlint:unchecked'
}

jar {
    manifest {
        attributes([
                'Specification-Title': 'grossjava9hacks',
                'Specification-Vendor': 'forge',
                'Specification-Version': '1', // We are version 1 of ourselves
                'Implementation-Title': project.name,
                'Implementation-Version': "${project.version}+${System.getenv("BUILD_NUMBER")?:0}+${grgit.branch.current().getName()}.${grgit.head().abbreviatedId}",
                'Implementation-Vendor':'forge',
                'Implementation-Timestamp': java.time.Instant.now().toString(),
                'Git-Commit': grgit.head().abbreviatedId,
                'Git-Branch': grgit.branch.current().getName(),
                'Build-Number': "${System.getenv("BUILD_NUMBER")?:0}",
        ])
    }
}

artifacts {
    archives jar
    archives sourcesJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar
            pom {
                name = 'Grotesque Java 9 Hacks'
                description = 'Grotesque Java 9 Hacks to allow modlauncher to function'
                url = 'https://github.com/cpw/grossjava9classpathhacks'
                scm {
                    url = 'https://github.com/cpw/grossjava9classpathhacks'
                    connection = 'scm:git:git://github.com/cpw/grossjava9classpathhacks.git'
                    developerConnection = 'scm:git:git@github.com:cpw/grossjava9classpathhacks.git'
                }
                issueManagement {
                    system = 'github'
                    url = 'https://github.com/cpw/grossjava9classpathhacks/issues'
                }

                developers {
                    developer {
                        id = 'cpw'
                        name = 'cpw'
                    }
                }
            }
        }
    }
    repositories {
        maven {
            credentials {
                username project.properties.forgeMavenUser ?: 'fake'
                password project.properties.forgeMavenPassword ?: 'news'
            }
            url project.properties.forgeMavenURL ?: 'http://files.minecraftforge.net/maven/manage/upload'
        }
    }
}